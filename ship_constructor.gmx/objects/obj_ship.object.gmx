<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grid_width = 7;
grid_height = 7
grid = ds_grid_create(grid_width, grid_height);
cell_size = 64;
rtime = room_speed;
alarm[0] = rtime;
for (var i = 0; i &lt; grid_width; i++)
{
    for (var j = 0; j &lt; grid_height; j++)
    {
        grid[# i, j] = cell_constructor(i, j);
    }
}
if (global.ship_name != "")
{
    ini_open(global.file_name);
    for (var i = 0; i &lt; grid_width; i++)
    {
        for (var j = 0; j &lt; grid_height; j++)
        {
            var cell = grid[# i, j];
            cell[| CELL_PERMISSONS] = ini_read_real(global.ship_name, string(i) + "x" + string(j), 0);
        }
    }
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = rtime;
ini_open(global.file_name);
for (var i = 0; i &lt; 7; i++)
{
    for (var j = 0; j &lt; 7; j++)
    {
        var cell = grid[# i, j];
        ini_write_real(global.ship_name, string(i) + "x" + string(j), cell[| CELL_PERMISSONS]);
    }
}
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_x &gt; x) &amp;&amp; (mouse_x &lt; (x + grid_width * cell_size)) &amp;&amp; 
(mouse_y &gt; y) &amp;&amp; (mouse_y &lt; (y + grid_height * cell_size))
{
    var pos_x = floor((mouse_x - x) / cell_size);
    var pos_y = floor((mouse_y - y) / cell_size);
    var mode = obj_arrow_control.arr_pointer;
    var cell = grid[# pos_x, pos_y];
    if (mode == 0)
    {
        cell[| CELL_PERMISSONS] = mode;
    } else
    {
        cell[| CELL_PERMISSONS] |=  (1 &lt;&lt; (mode - 1));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; grid_width; i++)
{
    for (var j = 0; j &lt; grid_height; j++)
    {
        var cell = grid[# i, j];
        if (cell[| CELL_PERMISSONS] == 0)
        {
            draw_sprite(s_cell_empty, -1, x + i * cell_size, y + j * cell_size);
        }
        if (cell[| CELL_PERMISSONS] &amp; PS_TUBE)
        {
            draw_sprite(s_cell_tube, -1, x + i * cell_size, y + j * cell_size);
        }
        if (cell[| CELL_PERMISSONS] &amp; PS_POWER)
        {
            draw_sprite(s_cell_power, -1, x + i * cell_size, y + j * cell_size);
        }
        if (cell[| CELL_PERMISSONS] &amp; PS_LIFE)
        {
            draw_sprite(s_cell_ls, -1, x + i * cell_size, y + j * cell_size);
        }
        if (cell[| CELL_PERMISSONS] &amp; PS_ENGINE)
        {
            draw_sprite(s_cell_engine, -1, x + i * cell_size, y + j * cell_size);
        }
        if (cell[| CELL_PERMISSONS] &amp; PS_NAVIGATION)
        {
            draw_sprite(s_cell_nav, -1, x + i * cell_size, y + j * cell_size);
        }
        if (cell[| CELL_PERMISSONS] &amp; PS_WEAPON)
        {
            draw_sprite(s_cell_weapon, -1, x + i * cell_size, y + j * cell_size);
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
