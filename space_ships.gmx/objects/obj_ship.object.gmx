<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship_original</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass = 100;

rot_pwr = 0.3;
mnvr_pwr = 0.1;
thurst_pwr = 1;

rot_speed = 0;

rot_left_key = ord('Q');
rot_right_key = ord('E');
mnvr_left_key = ord('A');
mnvr_right_key = ord('D');
mnvr_up_key = ord('W');
mnvr_down_key = ord('S');
thurst_up_key = vk_space;

instance_create(obj_great_ship.x, obj_great_ship.y, obj_mark);

sonar_point = obj_mark;
sonar_ttl = room_speed * 2;
sonar_alpha = 0;
sonar_key = ord('X');

hud_rot = 0;
hud_rot_koeff = 10;
hud_max_speed = 50;

alarm[0] = room_speed;
if (instance_exists(obj_net))
{
    net_send_first_load(obj_net.net_buf, obj_net.socket);
}

file = file_text_open_read("asteroids.dat");
var num = file_text_read_real(file);
repeat(num)
{
    var tx, ty;
    tx = file_text_read_real(file) * 100;
    ty = file_text_read_real(file) * 100;
    instance_create(tx, ty, obj_asteroid);
}
file_text_close(file);

ps = part_system_create();

part_system_depth(ps, depth + 1);
part_system_automatic_draw(ps, false);

pt1 = part_type_create();
part_type_shape(pt1, pt_shape_flare);
part_type_size(pt1, 0.3, 0.5, -0.05, 0);
part_type_speed(pt1, 0, 0, 0, 0);
part_type_direction(pt1, 0, 360, 0, 0);
part_type_color2(pt1, c_orange, c_yellow);
part_type_blend(pt1, 1);
part_type_alpha1(pt1, 1);
part_type_orientation(pt1, 0, 360, 0, 0, 0);
part_type_life(pt1, 4, 8);

em_main = part_emitter_create(ps);

man_xoff[0] = 30;
man_yoff[0] = -10;
man_xoff[1] = 30;
man_yoff[1] = 10;
man_xoff[2] = -30;
man_yoff[2] = -16;
man_xoff[3] = -30;
man_yoff[3] = 16;

pt2 = part_type_create();
part_type_shape(pt2, pt_shape_smoke);
part_type_orientation(pt2, 0, 360, 0, 0, 0);
part_type_colour1(pt2, c_white);
part_type_size(pt2, 0.02, 0.05, 0.003, 0);
part_type_alpha2(pt2, 1, 0);
part_type_speed(pt2, 3, 5, -0.1, 0);
part_type_life(pt2, 30, 60);

pt3 = part_type_create();
part_type_shape(pt3, pt_shape_smoke);
part_type_orientation(pt3, 0, 360, 0, 0, 0);
part_type_colour1(pt3, c_white);
part_type_size(pt3, 0.02, 0.05, 0.003, 0);
part_type_alpha2(pt3, 1, 0);
part_type_speed(pt3, 3, 5, -0.1, 0);
part_type_life(pt3, 30, 60);

em[0] = part_emitter_create(ps);
em[1] = part_emitter_create(ps);
em[2] = part_emitter_create(ps);
em[3] = part_emitter_create(ps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_net))
{
    net_send_position(obj_net.net_buf, obj_net.socket);
}
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle += rot_speed;
rot_speed += rot_pwr / mass * (keyboard_check(rot_left_key) - keyboard_check(rot_right_key));


var m_size = 3
var m_d = 5;
var m_num = 10;

part_type_direction(pt2, min(image_angle - 90 - m_d, image_angle - 90 + m_d), max(image_angle - 90 - m_d, image_angle - 90 + m_d), 0, 0);
part_type_direction(pt3, min(image_angle + 90 - m_d, image_angle + 90 + m_d), max(image_angle + 90 - m_d, image_angle + 90 + m_d), 0, 0);

for (var i = 0; i &lt; 4; i++)
{
    var dx = lengthdir_x(man_xoff[i], image_angle) + lengthdir_x(man_yoff[i], image_angle + 90);
    var dy = lengthdir_y(man_xoff[i], image_angle) + lengthdir_y(man_yoff[i], image_angle + 90);
    part_emitter_region(ps, em[i], dx - m_size, dx + m_size, dy - m_size, dy + m_size, ps_shape_ellipse, ps_distr_gaussian);
}
//part_emitter_burst(ps, em[0], pt2, 5);
//part_emitter_burst(ps, em[1], pt3, 5);
//part_emitter_burst(ps, em[2], pt2, 5);
//part_emitter_burst(ps, em[3], pt3, 5);
if (keyboard_check(rot_left_key))
{
    part_emitter_burst(ps, em[0], pt2, m_num);
    part_emitter_burst(ps, em[3], pt3, m_num);
}
if (keyboard_check(rot_right_key))
{
    part_emitter_burst(ps, em[1], pt3, m_num);
    part_emitter_burst(ps, em[2], pt2, m_num);
}
if (keyboard_check(mnvr_left_key))
{
    motion_add(image_angle + 90, mnvr_pwr / mass);
    part_emitter_burst(ps, em[0], pt2, m_num);
    part_emitter_burst(ps, em[2], pt2, m_num);
}
if (keyboard_check(mnvr_right_key))
{
    motion_add(image_angle - 90, mnvr_pwr / mass);
    part_emitter_burst(ps, em[1], pt3, m_num);
    part_emitter_burst(ps, em[3], pt3, m_num);
}
if (keyboard_check(mnvr_up_key))
{
    motion_add(image_angle, mnvr_pwr / mass);
    part_type_direction(pt2, min(image_angle - 180 + m_d, image_angle - 180 - m_d), max(image_angle - 180 - m_d, image_angle - 180 + m_d), 0, 0);
    part_emitter_burst(ps, em[2], pt2, m_num);
    part_emitter_burst(ps, em[3], pt2, m_num);
}
if (keyboard_check(mnvr_down_key))
{
    motion_add(image_angle + 180, mnvr_pwr / mass);
    part_type_direction(pt2, min(image_angle - m_d, image_angle + m_d), max(image_angle - m_d, image_angle + m_d), 0, 0);
    part_emitter_burst(ps, em[0], pt2, m_num);
    part_emitter_burst(ps, em[1], pt2, m_num);
}
if (keyboard_check(thurst_up_key))
{
    motion_add(image_angle, thurst_pwr / mass);
    var en_size = 6;
    part_type_speed(pt1, 3, 5, 0, 0);
    part_type_direction(pt1, 180 + image_angle, 180 + image_angle, 0, 0);
    
    part_emitter_region(ps, em_main, -lengthdir_x(sprite_width / 2, image_angle) - en_size, 
    -lengthdir_x(sprite_width / 2, image_angle) + en_size, -lengthdir_y(sprite_width / 2, image_angle) - en_size,
     -lengthdir_y(sprite_width / 2, image_angle) + en_size, ps_shape_ellipse, ps_distr_gaussian);
    part_emitter_burst(ps, em_main, pt1, 16)

}
if (keyboard_check(sonar_key))
{
    sonar_alpha = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_asteroid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//motion_add(point_direction(other.x, other.y, x, y), speed / 4);
var ast_dir = point_direction(other.x, other.y, x, y);
var ast_dis = point_distance(other.x, other.y, x, y);
var max_dis = sprite_get_bbox_right(sprite_index) - sprite_get_bbox_left(sprite_index) +
sprite_get_bbox_right(other.sprite_index) - sprite_get_bbox_left(other.sprite_index);
var angle_koeff = sin(degtorad(angle_difference(direction, ast_dir)));
rot_speed += speed * angle_koeff * 0.1;
motion_add(ast_dir, (max_dis - ast_dis) * 0.001);
while (place_meeting(x, y, other))
{
    x += lengthdir_x(1, ast_dir);
    y += lengthdir_y(1, ast_dir);
}
speed *= 0.9;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview = x - 512;
view_yview = y - 384;


draw_sprite_ext(s_big_arrow, -1, x, y, 1, 1, speed * 3.6, c_white, 1);
draw_sprite_ext(s_little_arrow, -1, x, y, 1, 1, speed * 36, c_white, 1);
part_system_position(ps, x, y);
part_system_drawit(ps);
draw_self();
if (object_exists(sonar_point))
{
    draw_sprite_ext(s_sonar, -1, x, y, 1, 1, point_direction(x, y, sonar_point.x, sonar_point.y), c_white, sonar_alpha);
    sonar_alpha = max(0, sonar_alpha - 1 / sonar_ttl);
}

//0 - rot
//1 - base
//2 - dir
//3 - speed
//4 - mark
hud_rot += (rot_speed * hud_rot_koeff);
var hud_width, hud_height;
hud_width = sprite_get_width(s_hud);
hud_height = sprite_get_height(s_hud);
//draw_sprite_part_ext(s_hud, 3, 0, 0, hud_width * min(1, speed / hud_max_speed), hud_height, 
//x - hud_width / 2, y - hud_height / 2, 1, 1, c_white, 1);
draw_sprite_ext(s_hud, 0, x, y, 1, 1, hud_rot, c_white, 1);
draw_sprite_ext(s_hud, 1, x, y, 1, 1, image_angle, c_white, 1);
draw_sprite_ext(s_hud, 2, x, y, 1, 1, direction, c_white, 1);
draw_sprite_ext(s_hud, 4, x, y, 1, 1, point_direction(x, y, sonar_point.x, sonar_point.y), c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
