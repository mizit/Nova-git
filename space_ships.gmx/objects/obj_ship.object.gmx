<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship_original</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass = 100;

rot_pwr = 0.3;
mnvr_pwr = 0.1;
thurst_pwr = 1;

rot_speed = 0;

rot_left_key = ord('Q');
rot_right_key = ord('E');
mnvr_left_key = ord('A');
mnvr_right_key = ord('D');
mnvr_up_key = ord('W');
mnvr_down_key = ord('S');
thurst_up_key = vk_space;

instance_create(50000, 50000, obj_mark);

sonar_point = obj_mark;
sonar_ttl = room_speed * 2;
sonar_alpha = 0;
sonar_key = ord('X');

hud_rot = 0;
hud_rot_koeff = 10;
hud_max_speed = 50;

alarm[0] = room_speed;
net_send_first_load(obj_net.net_buf, obj_net.socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>net_send_position(obj_net.net_buf, obj_net.socket);
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle += rot_speed;
rot_speed += rot_pwr / mass * (keyboard_check(rot_left_key) - keyboard_check(rot_right_key));
if (keyboard_check(mnvr_left_key))
{
    motion_add(image_angle + 90, mnvr_pwr / mass);
}
if (keyboard_check(mnvr_right_key))
{
    motion_add(image_angle - 90, mnvr_pwr / mass);
}
if (keyboard_check(mnvr_up_key))
{
    motion_add(image_angle, mnvr_pwr / mass);
}
if (keyboard_check(mnvr_down_key))
{
    motion_add(image_angle + 180, mnvr_pwr / mass);
}
if (keyboard_check(thurst_up_key))
{
    motion_add(image_angle, thurst_pwr / mass);
}
if (keyboard_check(sonar_key))
{
    sonar_alpha = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_asteroid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>motion_add(point_direction(other.x, other.y, x, y), speed / 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (object_exists(sonar_point))
{
    draw_sprite_ext(s_sonar, -1, x, y, 1, 1, point_direction(x, y, sonar_point.x, sonar_point.y), c_white, sonar_alpha);
    sonar_alpha = max(0, sonar_alpha - 1 / sonar_ttl);
}

//0 - rot
//1 - base
//2 - dir
//3 - speed
//4 - mark
hud_rot += (rot_speed * hud_rot_koeff);
var hud_width, hud_height;
hud_width = sprite_get_width(s_hud);
hud_height = sprite_get_height(s_hud);
draw_sprite_part_ext(s_hud, 3, 0, 0, hud_width * min(1, speed / hud_max_speed), hud_height, 
x - hud_width / 2, y - hud_height / 2, 1, 1, c_white, 1);
draw_sprite_ext(s_hud, 0, x, y, 1, 1, hud_rot, c_white, 1);
draw_sprite_ext(s_hud, 1, x, y, 1, 1, image_angle, c_white, 1);
draw_sprite_ext(s_hud, 2, x, y, 1, 1, direction, c_white, 1);
draw_sprite_ext(s_hud, 4, x, y, 1, 1, point_direction(x, y, sonar_point.x, sonar_point.y), c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
