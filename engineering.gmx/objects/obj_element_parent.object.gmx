<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_global_item</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
net_id = 0;
dragging = 0;
depth = -5;
grd_x = 0;
grd_y = 0;
hp = 100;
must_set_up = 0;
energy_consumption = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dragging)
{
    x = mouse_x;
    y = mouse_y;
}
if (must_set_up)
{
    if ((grd_x == 0) || (grd_y == 0))
    {
        must_set_up = 0;
    }
    else
    {
        with(obj_part_parent)
        {
            if ((grd_x == other.grd_x) &amp;&amp; (grd_y == other.grd_y))
            {
                if (ds_list_size(elements_list) &lt; elements_max)
                {
                    ds_list_add(elements_list, other);
                    other.visible = false;
                    other.dragging = 0;
                    other.grd_x = grd_x;
                    other.grd_y = grd_y;
                    other.must_set_up = 0;
                    event_perform(ev_other, ev_user2);
                    var l_tmp = other;
                    with (obj_inv)
                    {
                        if (permission == INV_ELEMENTS)
                        {
                            ds_list_delete(items_list, ds_list_find_index(items_list, l_tmp));
                        }
                    }
                }
                /*else
                {
                    inv_item_add(other);
                    other.dragging = 0;
                    other.visible = false;
                    other.grd_x = 0;
                    other.grd_y = 0;
                    net_send_item_set_id(obj_net.net_buf, obj_net.socket, other);
                }*/
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dragging)
{
    if (instance_place(x, y, obj_part_grid) &amp;&amp; 
    (ds_list_size(obj_part_grid.elements_list) &lt; obj_part_grid.elements_max))
    {
            ds_list_add(obj_part_grid.elements_list, id);
            visible = false;
            dragging = 0;
            grd_x = obj_part_grid.base.grd_x;
            grd_y = obj_part_grid.base.grd_y;
            with(obj_part_grid.base)
            {
                event_perform(ev_other, ev_user2);
            }
            net_send_item_set_id(obj_net.net_buf, obj_net.socket, id);
            //instance_destroy();
    }
    else
    {
        inv_item_add(id);
        dragging = 0;
        visible = false;
        grd_x = 0;
        grd_y = 0;
        net_send_item_set_id(obj_net.net_buf, obj_net.socket, id);
        /*var cont = inv_cell_with_object(object_index);
        cont.number++;
        instance_destroy();*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
