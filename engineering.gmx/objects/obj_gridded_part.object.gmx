<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_tube_straight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_part_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
rot_step = 90;
need_permission = PM_POWER;
//outputs = LEFT|RIGHT;
dragging = 0;
width = 2;
height = 2;
grid_size = max(width, height);
grid_outputs = ds_grid_create(grid_size, grid_size);
for (var i = 0; i &lt; grid_size; i++)
{
    for (var j = 0; j &lt; grid_size; j++)
    {
        grid_outputs[# i, j] = 0;
    }
}
energy_consumption = 0;
ec_koeff = 0;
alarm[5] = 1;

grid_outputs[# 0, 1] = LEFT|DOWN;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>elements_max = width * height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dragging)
{
    x = mouse_x + (width / 2) * obj_grid.cell_size - obj_grid.cell_size / 2;
    y = mouse_y + (height / 2) * obj_grid.cell_size - obj_grid.cell_size / 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dragging)
{
    image_angle -= rot_step;
    for (var i = 0; i &lt; grid_size; i++)
    {
        for (var j = 0; j &lt; grid_size; j++)
        {
            grid_outputs[# i, j] = circular_shift(grid_outputs[# i, j], 4, rot_step / 90);
        }
    }
    for (var i = 1; i &lt; grid_size; i++)
    {
        var tmp = grid_outputs[# i, 0];
        grid_outputs[# i, 0] = grid_outputs[# 0, grid_size - 1 - i];
        grid_outputs[# 0, grid_size - 1 - i] = grid_outputs[# grid_size - 1 - i , grid_size - 1];
        grid_outputs[# grid_size - 1 - i , grid_size - 1] = grid_outputs[# grid_size - 1, i];
        grid_outputs[# grid_size - 1, i] = tmp;
    }
    var tmp = width;
    width = height;
    height = tmp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dragging)
{
    image_angle += rot_step;
    for (var i = 0; i &lt; grid_size; i++)
    {
        for (var j = 0; j &lt; grid_size; j++)
        {
            grid_outputs[# i, j] = circular_shift(grid_outputs[# i, j], 4, -rot_step / 90);
        }
    }
    for (var i = 1; i &lt; grid_size; i++)
    {
        var tmp = grid_outputs[# i, 0];
        grid_outputs[# i, 0] = grid_outputs[# grid_size - 1, i];
        grid_outputs[# grid_size - 1, i] = grid_outputs[# grid_size - 1 - i , grid_size - 1];
        grid_outputs[# grid_size - 1 - i , grid_size - 1] = grid_outputs[# 0, grid_size - 1 - i];
        grid_outputs[# 0, grid_size - 1 - i] = tmp;
    }
    var tmp = width;
    width = height;
    height = tmp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dragging)
{
    var crnt_grid = grid_find_active();
    var g_x, g_y;
    g_x = floor((mouse_x - crnt_grid.x) / crnt_grid.cell_size); 
    g_y = floor((mouse_y - crnt_grid.y) / crnt_grid.cell_size);
    if (!gridded_part_set(crnt_grid, g_x, g_y, 1))
    {
        inv_item_add(id);
        dragging = 0;
        
        /*instance_destroy();
        var i_cell = inv_cell_with_object(object_index);
        i_cell.number ++;*/
    }
    else
    {
        part_set_selected(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var crnt_grid = grid_find_active();
if ((crnt_grid) &amp;&amp; (visible))
{
    dragging = 1;
    grid_delete_object(crnt_grid, id);
    event_perform(ev_other, ev_user1);
    power_recalculation(crnt_grid.ship_grid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>energy_consumption = 0;
for (var i = 0; i &lt; ds_list_size(elements_list); i++)
{
    energy_consumption += elements_list[| i].energy_consumption * ec_koeff;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
