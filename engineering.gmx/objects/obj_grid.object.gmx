<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Сетка отображающая внутренности корабля
//Ячейка сетки состоит из
//1)Спрайта отображающего её начинку
//2)Угла его поворота
//3)Допусков позволяющих ставить в данную клетку те или иные типы модулей
//4)Данных по активным выходам
//5)Списка подключённых модулей питания
//6)Флагов пересчёта
width = 7;
height = 7;
ship_grid = ds_grid_create(width, height);
ship_grid_fill(ship_grid);
cell_size = 64;
active = true;

ps_list = ds_list_create();
for (var i = 0; i &lt; 7; i++)
{
    for (var j = 0; j &lt; 7; j++)
    {
        cell_set_permission(ship_grid, i, j, 0);
    }
}
net_send_shell(obj_net.net_buf, obj_net.socket);
first_load = 1;
item_counter = 0;
alarm[0] = 1;
/*ini_open("ships.ini");
for (var i = 0; i &lt; 7; i++)
{
    for (var j = 0; j &lt; 7; j++)
    {
        cell_set_permission(ship_grid, i, j, ini_read_real("First ship", string(i) + "x" + string(j), 0));
    }
}
ini_close();*/

/*
cell_set_permission(ship_grid, 5, 0, 0);
cell_set_permission(ship_grid, 6, 0, 0);
cell_set_permission(ship_grid, 5, 1, 0);
cell_set_permission(ship_grid, 6, 1, 0);
cell_set_permission(ship_grid, 5, 5, 0);
cell_set_permission(ship_grid, 6, 5, 0);
cell_set_permission(ship_grid, 5, 6, 0);
cell_set_permission(ship_grid, 6, 6, 0);

cell_set_permission(ship_grid, 0, 2, 0);
cell_set_permission(ship_grid, 0, 3, 0);
cell_set_permission(ship_grid, 0, 4, 0);
cell_set_permission(ship_grid, 1, 2, 0);
cell_set_permission(ship_grid, 1, 3, 0);
cell_set_permission(ship_grid, 1, 4, 0);
cell_set_permission(ship_grid, 2, 2, 0);
cell_set_permission(ship_grid, 2, 3, 0);
cell_set_permission(ship_grid, 2, 4, 0);

cell_set_permission(ship_grid, 5, 2, PM_TUBE|PM_POWER);
cell_set_permission(ship_grid, 6, 2, PM_TUBE|PM_POWER);
cell_set_permission(ship_grid, 5, 3, PM_TUBE|PM_POWER);
cell_set_permission(ship_grid, 6, 3, PM_TUBE|PM_POWER);
cell_set_permission(ship_grid, 5, 4, PM_TUBE|PM_POWER);
cell_set_permission(ship_grid, 6, 4, PM_TUBE|PM_POWER);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var tmp = instance_create(0, 0, obj_money_case);
//inv_item_add(tmp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>load_recalculation();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; width; i++)
{
    for (var j = 0; j &lt; height; j++)
    {
        var a = ship_grid[# i, j];
        if (a[| CELL_PERMISSION] &amp; PM_TUBE)
        {
            draw_set_alpha(0.3);
            draw_set_colour(c_white);
            if (a[| CELL_PERMISSION] &amp; PM_POWER)
            {
                draw_set_colour(c_yellow);
            }
            if (a[| CELL_PERMISSION] &amp; PM_NAVIGATION)
            {
                draw_set_colour(c_blue);
            }
            if (a[| CELL_PERMISSION] &amp; PM_ENGINE)
            {
                draw_set_colour(c_orange);
            }
            if (a[| CELL_PERMISSION] &amp; PM_WEAPON)
            {
                draw_set_colour(c_red);
            }
            if (a[| CELL_PERMISSION] &amp; PM_LIFE_SYSTEM)
            {
                draw_set_colour(c_green);
            }
            draw_rectangle(x + i * cell_size, y + j * cell_size, x + (i + 1) * cell_size,
             y + (j + 1) * cell_size, 0); 
        }
        draw_set_colour(c_black);
        draw_set_alpha(1);
        if (a[| CELL_OUTPUTS] &amp; LEFT)
        {
            draw_circle(x + i * cell_size, y + (j + 0.5) * cell_size, 3, 0);
        }
        if (a[| CELL_OUTPUTS] &amp; RIGHT)
        {
            draw_circle(x + (i + 1) * cell_size, y + (j + 0.5) * cell_size, 3, 0);
        }
        if (a[| CELL_OUTPUTS] &amp; UP)
        {
            draw_circle(x + (i + 0.5) * cell_size, y + j * cell_size, 3, 0);
        }
        if (a[| CELL_OUTPUTS] &amp; DOWN)
        {
            draw_circle(x + (i + 0.5) * cell_size, y + (j + 1) * cell_size, 3, 0);
        }
        if (ds_list_size(a[| CELL_PS_LIST]) &gt; 0)
        {
            var test = 0;
            for (var k = 0; k &lt; ds_list_size(a[| CELL_PS_LIST]); k++)
            {
                var tmp = a[| CELL_PS_LIST];
                tmp = tmp[| k];
                if (tmp.shut_down == 0)
                {
                    test = 1;
                }
            }
            if (test)
            {
                draw_sprite(s_thunder, -1, x + i * cell_size, y + j * cell_size);
            }
        }
    }
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
