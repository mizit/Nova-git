<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_asterod</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>high_surf = surface_create(room_width, room_height);
middle_surf = surface_create(room_width, room_height);
low_surf = surface_create(room_width, room_height);
active = 1;
size = 1;
base_size = 50;
low_num = 8000;
mid_num = 50000;
high_num = 160000;

ps = part_system_create();

pt = part_type_create();
part_type_shape(pt, pt_shape_spark);
part_type_size(pt, 0.1, 0.1, 0, 0);
part_type_colour1(pt, c_white);
part_type_life(pt, 10000, 10000);

em = part_emitter_create(ps);
part_emitter_region(ps, em, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);
//part_emitter_burst(ps, em, pt, 160000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_wheel_down())
{
    size = max(size - 1, 0);
}
if (mouse_wheel_up())
{
    size = min(size + 1, 10);
}
if (keyboard_lastkey &gt; 48) &amp;&amp; (keyboard_lastkey &lt; 52)
{
    active = keyboard_lastkey - 48;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var surf;
switch (active)
{
    case 1:
    surf = high_surf;
    break;
    case 2:
    surf = middle_surf;
    break;
    case 3:
    surf = low_surf;
    break;
    default:
    exit;
}
surface_set_target(surf);
draw_set_blend_mode(bm_subtract);
draw_set_colour(c_white);
draw_circle(mouse_x, mouse_y, base_size * size, 0);
draw_set_blend_mode(bm_normal);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var surf;
switch (active)
{
    case 1:
    surf = high_surf;
    break;
    case 2:
    surf = middle_surf;
    break;
    case 3:
    surf = low_surf;
    break;
    default:
    exit;
}
surface_set_target(surf);
draw_set_colour(c_white);
draw_circle(mouse_x, mouse_y, base_size * size, 0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(high_surf))
{
    draw_surface_ext(high_surf, 0, 0, 1, 1, 0, c_red, 0.3);
    draw_surface_ext(middle_surf, 0, 0, 1, 1, 0, c_yellow, 0.3);
    draw_surface_ext(low_surf, 0, 0, 1, 1, 0, c_green, 0.3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, obj_spot);

var sprite_low = sprite_create_from_surface(low_surf, 0, 0, room_width, room_height, 1, 0, 0, 0);
sprite_collision_mask(sprite_low, 1, 0, 0, 0, 0, 0, 0, 128);
obj_spot.mask_index = sprite_low; 
obj_spot.sprite_index = sprite_low;
surface_free(low_surf);
low_surf = surface_create(room_width, room_height);
repeat(low_num)
{
    var tx, ty;
    tx = irandom(room_width);
    ty = irandom(room_height);
    if (instance_position(tx, ty, obj_spot))
    {
        instance_create(tx, ty, obj_ast_low);
    }
}
var sprite_med = sprite_create_from_surface(middle_surf, 0, 0, room_width, room_height, 1, 0, 0, 0);
sprite_collision_mask(sprite_med, 1, 0, 0, 0, 0, 0, 0, 128);
obj_spot.mask_index = sprite_med; 
obj_spot.sprite_index = sprite_med;
surface_free(middle_surf);
middle_surf = surface_create(room_width, room_height);
repeat(mid_num)
{
    var tx, ty;
    tx = irandom(room_width);
    ty = irandom(room_height);
    if (instance_position(tx, ty, obj_spot))
    {
        instance_create(tx, ty, obj_ast_mid);
    }
}
var sprite_high = sprite_create_from_surface(high_surf, 0, 0, room_width, room_height, 1, 0, 0, 0);
sprite_collision_mask(sprite_high, 1, 0, 0, 0, 0, 0, 0, 128);
obj_spot.mask_index = sprite_high; 
obj_spot.sprite_index = sprite_high;
surface_free(high_surf);
high_surf = surface_create(room_width, room_height);
repeat(high_num)
{
    var tx, ty;
    tx = irandom(room_width);
    ty = irandom(room_height);
    if (instance_position(tx, ty, obj_spot))
    {
        instance_create(tx, ty, obj_ast_high);
    }
}

with (obj_spot)
{
    instance_destroy();
}
sprite_delete(sprite_low);
sprite_delete(sprite_med);
sprite_delete(sprite_high);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
