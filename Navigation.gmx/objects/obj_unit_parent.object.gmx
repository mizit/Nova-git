<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_bubble = s_bubble;
my_text = "";
bubble_scale = 0.5;
show_bubble = 1;
xoffset = -40;
yoffset = 0;
bubble_alpha = 0;
alpha_step = 1 / room_speed;
common_angle = 270;
bubble_angle = common_angle;

path_show = 1;
path_color = c_orange;
path_length = 0;
path_direction = direction;
path_width = 3;

thurst_pwr = 0;
mass = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (show_bubble)
{
    bubble_alpha = min(bubble_alpha + alpha_step, 1);
}
else
{
     bubble_alpha = max(bubble_alpha - alpha_step, 0);
}
//Расчёт координат отрисовки относительно вида
var d_x, d_y;
d_x = (x - view_xview[1]) / obj_globnav.scale;
d_y = (y - view_yview[1]) / obj_globnav.scale;
var b_size = max(sprite_get_height(my_bubble), sprite_get_width(my_bubble));
if (d_x &lt; b_size) || (d_x &gt; (view_wport[1] - b_size)) || 
(d_y &lt; b_size) || (d_y &gt; (view_hport[1] - b_size))
{
    bubble_angle = point_direction(view_xview[1] + view_wview[1] / 2,
    view_yview[1] + view_hview[1] / 2, x, y);
}
else
{
    bubble_angle = common_angle;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var d_x, d_y;
d_x = (x - view_xview[1]) / obj_globnav.scale;
d_y = (y - view_yview[1]) / obj_globnav.scale;
if (bubble_alpha &gt; 0)
{
    draw_sprite_ext(my_bubble, -1, d_x, d_y, 1, 1, bubble_angle, c_white, bubble_alpha);
    if (sprite_exists(sprite_index))
    {
        bubble_scale = min(sprite_get_width(my_bubble) / sprite_get_width(sprite_index), 
        sprite_get_height(my_bubble) / sprite_get_height(sprite_index)) / sqrt(2);
        draw_sprite_ext(sprite_index, -1, d_x + lengthdir_x(xoffset, bubble_angle) +
        lengthdir_x(yoffset, bubble_angle + 90), d_y + lengthdir_y(xoffset, bubble_angle) +
        lengthdir_y(yoffset, bubble_angle + 90), bubble_scale, bubble_scale, image_angle, c_white, bubble_alpha);
    }
    if (my_text != "")
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(d_x + lengthdir_x(xoffset, bubble_angle) +
        lengthdir_x(yoffset, bubble_angle + 90), d_y + lengthdir_y(xoffset, bubble_angle) +
        lengthdir_y(yoffset, bubble_angle + 90), my_text);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
}
    
if (path_show)
{
    draw_set_colour(path_color);
    var line_x, line_y;
    line_x = ((x + lengthdir_x(path_length, path_direction)) - view_xview[1]) / obj_globnav.scale;
    line_y = ((y + lengthdir_y(path_length, path_direction)) - view_yview[1]) / obj_globnav.scale;
    draw_line_width(d_x, d_y, line_x, line_y, path_width);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (point_distance(x, y, obj_ship.x, obj_ship.y) &lt;= obj_ship.radar_range)
{
    if (sprite_exists(sprite_index))
    {
        draw_self();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
