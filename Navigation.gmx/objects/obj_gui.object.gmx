<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chn_x_offset = 518;
chn_y_offset = 17;
chn_x_step = 25;
chn_y_step = 45;
chn_num = 4;
channels[0] = 0;
channels[1] = 52;
channels[2] = 118;
channels[3] = 1745;
btn_x_offset = 260510;
btn_y_offset = 260002;
chn_text_x_offset = 613;
chn_text_y_offset = 17;
select = 0;
sel_rect_x_off = 611;
sel_rect_y_off = 16;
sel_rect_x_off_b = 260611;
sel_rect_y_off_b = 260016;
sel_rect_width = 75;
sel_rect_height = 17;
msg_x_offset = 507;
msg_y_offset = 188;
msg_width = 185;
msg_length = 77;
msg_text = "";

log_x = 507;
log_y = 268;
log_width = 185;
log_height = 234;
log_surf = surface_create(log_width, log_height);
log_buf_surf = surface_create(log_width, log_height);
surface_set_target(log_surf);
draw_set_colour(c_black);
draw_rectangle(0, 0, log_width, log_height, 0);
surface_reset_target();
//log_notes = ds_list_create();
//log_max_notes = 20;

coord_size = 10;
surf_width = 10;
surf_height = 20;
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
for (var i = 0; i &lt; coord_size; i++)
{
    surface_letter[i] = surface_create(surf_width, surf_height);
    surface_set_target(surface_letter[i]);
    draw_text(surf_width / 2, surf_height / 2, chr(i + 97));
    surface_reset_target();
}
for (var i = 0; i &lt; coord_size; i++)
{
    surface_number[i] = surface_create(surf_width, surf_height);
    surface_set_target(surface_number[i]);
    draw_text(surf_width / 2, surf_height / 2, string(i));
    surface_reset_target();
}
draw_set_halign(fa_left);
draw_set_valign(fa_top);

hp_offset_x = 460;
hp_offset_y = 8;
oxy_offset_x = 420;
oxy_offset_y = 8;
tube_rect_left = 5;
tube_rect_top = 6;
tube_rect_right = 27;
tube_rect_bottom = 89;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_color(c_white);
//draw_text(25, 25, instance_number(obj_unit_parent));
/*draw_text(25, 25, "x = " + string(obj_ship.x) + ", y = " + string(obj_ship.y));
draw_text(25, 50, "speed = " + string(obj_ship.speed)); 
if (object_exists(obj_ship.sonar_point))
{
    draw_text(25, 75, "Distance to goal = " + string(point_distance(obj_ship.x, obj_ship.y, obj_ship.sonar_point.x, obj_ship.sonar_point.y)));
}*/

if (mouse_check_button_pressed(mb_left))
{
    for (var i = 0; i &lt; chn_num; i++)
    {
        var tmp_step = 10000;
        for (var j = 0; j &lt; 4; j++)
        {
            tmp_step /= 10;
            if (point_in_rectangle(mouse_x, mouse_y, btn_x_offset + chn_x_step * j,
            btn_y_offset + chn_y_step * i, btn_x_offset + chn_x_step * (j + 1),
            btn_y_offset + chn_y_step * (i + 0.5)))
            {
                channels[i] += tmp_step;
            }
            if (point_in_rectangle(mouse_x, mouse_y, btn_x_offset + chn_x_step * j,
            btn_y_offset + chn_y_step * (i + 0.5), btn_x_offset + chn_x_step * (j + 1),
            btn_y_offset + chn_y_step * (i + 1)))
            {
                channels[i] -= tmp_step;
            }
            if (channels[i] &gt; 9999)
            {
                channels[i] -= 10000;
            }
            if (channels[i] &lt; 0)
            {
                channels[i] += 10000;
            }
        }
        if (point_in_rectangle(mouse_x, mouse_y, sel_rect_x_off_b, sel_rect_y_off_b + chn_y_step * i,
        sel_rect_x_off_b + sel_rect_width, sel_rect_y_off_b + chn_y_step * i + sel_rect_height))
        {
            select = i;
        }
    }
}
draw_set_color(c_green);
draw_set_font(f_radio);
draw_sprite(s_hud, -1, 500, 0);
for (var i = 0; i &lt; chn_num; i++)
{
    for (var j = 0; j &lt; 4; j++)
    {
        var tmp_ch;
        tmp_ch = string_char_at(string_format(channels[i], 4, 0), j + 1);
        if (tmp_ch == " ")
        {
            tmp_ch = "0";
        }
        draw_text(chn_x_offset + j * chn_x_step, 
        chn_y_offset + i * chn_y_step, tmp_ch);
    }
    draw_text(chn_text_x_offset, chn_text_y_offset + i * chn_y_step, "Channel " + string(i + 1));
}
draw_rectangle(sel_rect_x_off, sel_rect_y_off + select * chn_y_step, 
sel_rect_x_off + sel_rect_width, sel_rect_y_off + select * chn_y_step + sel_rect_height, 1);

draw_set_font(f_radio_msg);
msg_text = string_copy(keyboard_string, 1, msg_length);
draw_text_ext(msg_x_offset, msg_y_offset, msg_text, -1, msg_width);

if (!surface_exists(log_surf))
{
    log_surf = surface_create(log_width, log_height);
}
if (!surface_exists(log_buf_surf))
{
    log_buf_surf = surface_create(log_width, log_height);
}
draw_surface(log_surf, log_x, log_y);

var hp_hight = (tube_rect_bottom - tube_rect_top) * obj_ship.hp / obj_ship.max_hp;
var oxy_hight = (tube_rect_bottom - tube_rect_top) * min(1, obj_ship.oxygen / obj_ship.max_oxygen); 

draw_set_colour(c_red);
draw_rectangle(hp_offset_x + tube_rect_left, hp_offset_y + tube_rect_bottom, 
hp_offset_x + tube_rect_right, hp_offset_y + tube_rect_bottom - hp_hight, 0);
draw_set_colour(c_blue);
draw_rectangle(oxy_offset_x + tube_rect_left, oxy_offset_y + tube_rect_bottom, 
oxy_offset_x + tube_rect_right, oxy_offset_y + tube_rect_bottom - oxy_hight, 0);


if (obj_ship.oxygen &gt; obj_ship.max_oxygen)
{
    var oxy_hight_yellow = (tube_rect_bottom - tube_rect_top) * obj_ship.max_oxygen / obj_ship.oxygen; 
    var oxy_hight_red = (tube_rect_bottom - tube_rect_top) * 50 / obj_ship.oxygen; 
    draw_set_colour(c_yellow);
    draw_line(oxy_offset_x + tube_rect_left, oxy_offset_y + tube_rect_bottom - oxy_hight_yellow,
    oxy_offset_x + tube_rect_right, oxy_offset_y + tube_rect_bottom - oxy_hight_yellow);
}
else
{
    var oxy_hight_red = (tube_rect_bottom - tube_rect_top) * 50 / obj_ship.max_oxygen; 
}
draw_set_colour(c_red);
draw_line(oxy_offset_x + tube_rect_left, oxy_offset_y + tube_rect_bottom - oxy_hight_red,
oxy_offset_x + tube_rect_right, oxy_offset_y + tube_rect_bottom - oxy_hight_red);

draw_sprite(s_tube, -1, hp_offset_x, hp_offset_y);
draw_sprite(s_tube, -1, oxy_offset_x, oxy_offset_y);

draw_text(50, 50, instance_number(obj_item));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_gray);

for (var i = 0; i &lt; 10; i++)
{
    draw_line(0, i * 25000, room_width, i * 25000);
    draw_line(i * 25000, 0, i * 25000, room_height);
}
for (var i = 0; i &lt; coord_size; i++)
{
    if (surface_exists(surface_letter[i]))
    {
        draw_surface_ext(surface_letter[i], room_width / coord_size * (i + 0.5), view_yview[1], 
        obj_globnav.scale, obj_globnav.scale, 0, c_white, 1);
    }
    else
    {
        draw_set_colour(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        surface_letter[i] = surface_create(surf_width, surf_height);
        surface_set_target(surface_letter[i]);
        draw_text(surf_width / 2, surf_height / 2, chr(i + 97));
        surface_reset_target();
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
    if (surface_exists(surface_number[i]))
    {
        draw_surface_ext(surface_number[i], view_xview[1], room_height / coord_size * (i + 0.5),
        obj_globnav.scale, obj_globnav.scale, 0, c_white, 1);
    }
    else
    {
        draw_set_colour(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        surface_number[i] = surface_create(surf_width, surf_height);
        surface_set_target(surface_number[i]);
        draw_text(surf_width / 2, surf_height / 2, string(i));
        surface_reset_target();
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>net_send_msg(obj_net.net_buf, obj_net.socket);
keyboard_string = "";
msg_text = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
