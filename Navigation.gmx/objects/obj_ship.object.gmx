<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship_original</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_moving_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
bubble_scale = 0.45;
mass = 100;

rot_pwr = 0.3;
mnvr_pwr = 0.1;
thurst_pwr = 1;
back_drive = 0;

rot_speed = 0;

rot_left_key = ord('Q');
rot_right_key = ord('E');
mnvr_left_key = ord('A');
mnvr_right_key = ord('D');
mnvr_up_key = ord('W');
mnvr_down_key = ord('S');
thurst_up_key = vk_space;

sonar_point = obj_great_ship;
sonar_ttl = room_speed * 2;
sonar_alpha = 0;
sonar_key = ord('X');
net_send_first_load(obj_net.net_buf, obj_net.socket);

radar_range = 0;
radio_range = 0;
system_level = 0;

max_hp = 1;
max_oxygen = 1;
hp = 0;
oxygen = 0;
oxygen_output = 0;
safely = 0;


time_oxygen_out = 300;
alarm[0] = time_oxygen_out;

alarm[1] = 1;
item_counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>net_send_get_asteroid(obj_net.net_buf, obj_net.socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>net_send_item_get_num(obj_net.net_buf, obj_net.socket, item_counter);
alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = time_oxygen_out;
var step = 10;
var oxygen_out = ceil((1 - (hp / max_hp)) * step) + 1;
oxygen_out -= (oxygen_output / 10);
var radiation = 0;
with (obj_radiation)
{
    if (point_distance(x, y, other.x, other.y) &lt; radius)
    {
        if (radiation &lt; level)
        {
            radiation = level;
        }
    }
}
radiation -= safely / 50;
oxygen_out += radiation * 3;
if (oxygen_out &gt; 0)
{
    net_send_oxygen_out(obj_net.net_buf, obj_net.socket, oxygen_out);
}
if (oxygen_out &lt; 0)
{
    net_send_oxygen_up(obj_net.net_buf, obj_net.socket, -oxygen_out);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_angle += rot_speed;
/*rot_speed += rot_pwr / mass * (keyboard_check(rot_left_key) - keyboard_check(rot_right_key));
if (keyboard_check(mnvr_left_key))
{
    motion_add(image_angle + 90, mnvr_pwr / mass);
}
if (keyboard_check(mnvr_right_key))
{
    motion_add(image_angle - 90, mnvr_pwr / mass);
}
if (keyboard_check(mnvr_up_key))
{
    motion_add(image_angle, mnvr_pwr / mass);
}
if (keyboard_check(mnvr_down_key))
{
    motion_add(image_angle + 180, mnvr_pwr / mass);
}
if (keyboard_check(thurst_up_key))
{
    motion_add(image_angle, thurst_pwr / mass);
}
if (keyboard_check(sonar_key))
{
    sonar_alpha = 1;
}*/
obj_globnav.max_mark = system_level;
switch (system_level)
{
    case 0:
    {
        with (obj_unit_parent)
        {
            path_show = 0;
        }
        break;
    }
    case 1:
    {
        with (obj_unit_parent)
        {
            path_show = 0;
        }
        obj_ship.path_show = 1;
        break;
    }
    case 2:
    {
        with (obj_unit_parent)
        {
            path_show = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*if (object_exists(sonar_point))
{
    draw_sprite_ext(s_sonar, -1, x, y, 1, 1, point_direction(x, y, sonar_point.x, sonar_point.y), c_white, sonar_alpha);
    sonar_alpha = max(0, sonar_alpha - 1 / sonar_ttl);
}*/
draw_set_colour(c_green);
draw_set_circle_precision(64);
draw_circle(x, y, radar_range, 1);
draw_set_colour(c_green);
var line_x, line_y;
line_x = (x + lengthdir_x(radar_range, direction));
line_y = (y + lengthdir_y(radar_range, direction));
draw_line(x, y, line_x, line_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
