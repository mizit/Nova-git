<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_list = ds_list_create();
dy = 50;
dx = 120;
font = font0;
color = c_black;
back_color = c_green;
selected_color = make_colour_rgb(128, 128, 255);
selected = noone;
pointed = noone;


ds_list_add(my_list, gadget_create(GT_WEAPON, "Крушило", 4), gadget_create(GT_WEAPON, "Рубило", 2), 
gadget_create(GT_ARMOR, "Защищало", 2), gadget_create(GT_RADAR, "Искало", 1), gadget_create(GT_JAMMER, "Прятка", 3));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pointed = noone;
for (var i = 0; i &lt; ds_list_size(my_list); i++)
{
    if (point_in_rectangle(mouse_x, mouse_y, x, y + dy * i, x + dx, y + dy * (i + 1)))
    {
        pointed = i;
        if (mouse_check_button(mb_left))
        {
            selected = i;
            obj_cursor.my_grid = noone;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; ds_list_size(my_list); i++)
{
    var gadget = my_list[| i];
    if (pointed == i)
    {
        draw_set_colour(back_color);
        draw_rectangle(x, y + dy * i, x + dx, y + dy * (i + 1), 0);
    }
    if (selected == i)
    {
        draw_set_colour(selected_color);
        draw_rectangle(x, y + dy * i, x + dx, y + dy * (i + 1), 0);
        if (!instance_exists(obj_function_list))
        {
            var tmp = instance_create(x + dx, y, obj_function_list);
            tmp.gadget = gadget;
        }
        else if (obj_function_list.gadget != gadget)
        {
            with(obj_function_list)
            {
                instance_destroy();
            }
            var tmp = instance_create(x + dx, y, obj_function_list);
            tmp.gadget = gadget;
        }
    }
    draw_set_font(font);
    draw_set_color(color);
    draw_text(x, y + dy * i, gadget[| GADGET_NAME]);
    //Отрисовка атак, защит и прочего
    for (var j = 0; j &lt; ds_list_size(gadget[| GADGET_FUNC]); j++)
    {
        var func = ds_list_find_value(gadget[| GADGET_FUNC], j);
        var pos = func[| FUNC_POS];
        if (pos[| POS_POINT] != noone)
        {
            var grid_w = ds_grid_width(func[| FUNC_GRID]);
            var grid_h = ds_grid_height(func[| FUNC_GRID]);
            var cell_size = pos[| POS_POINT].cell_size;
            var grid_size = pos[| POS_POINT].grid_size;
            var my_grid = func[| FUNC_GRID];
            var my_sprite;
            switch (gadget[| GADGET_TYPE])
            {
                case GT_WEAPON:
                {
                    my_sprite = s_goal;
                    break;
                }
                case GT_ARMOR:
                {
                    my_sprite = s_armor;
                    break;
                }
                case GT_RADAR:
                {
                    my_sprite = s_radar;
                    break;
                }
                case GT_JAMMER:
                {
                    my_sprite = s_jammer;
                    break;
                }
            }
            draw_set_alpha(0.5);
            for (var ii = 0; ii &lt; grid_w; ii++)
            {
                for (var jj = 0; jj &lt; grid_h; jj++)
                {
                    if ((pos[| POS_X] + ii &lt; grid_size) &amp;&amp; (pos[| POS_Y] + jj &lt; grid_size) &amp;&amp; 
                    (pos[| POS_POINT].ship_grid[# (pos[| POS_X] + ii), (pos[| POS_Y] + jj)] &amp; CELL_EXISTS) &amp;&amp;
                    (my_grid[# ii, jj] &amp; CELL_EXISTS))
                    {
                        if (obj_function_list.pointed == j)
                        {
                            draw_set_alpha(1);
                        }
                        else
                        {
                            draw_set_alpha(0.5);
                        }
                        draw_sprite(my_sprite, -1, pos[| POS_POINT].x + (pos[| POS_X] + ii) * cell_size,
                        pos[| POS_POINT].y + (pos[| POS_Y] + jj) * cell_size);
                    }
                }
            }
            draw_set_alpha(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
