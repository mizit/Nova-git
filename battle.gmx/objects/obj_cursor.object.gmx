<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_grid = noone;
my_sprite = s_goal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var crnt_grid = get_active_grid();
if (ds_exists(my_grid, ds_type_grid) &amp;&amp; point_in_rectangle(mouse_x, mouse_y,
crnt_grid.x, crnt_grid.y, crnt_grid.x + crnt_grid.cell_size * crnt_grid.grid_size, 
crnt_grid.y + crnt_grid.cell_size * crnt_grid.grid_size))
{
    if (((obj_function_list.gadget[| GADGET_TYPE] == GT_WEAPON) || (obj_function_list.gadget[| GADGET_TYPE] == GT_RADAR)) &amp;&amp;!(crnt_grid.my_ship)) ||
    (((obj_function_list.gadget[| GADGET_TYPE] == GT_ARMOR) || (obj_function_list.gadget[| GADGET_TYPE] == GT_JAMMER)) &amp;&amp;(crnt_grid.my_ship))
    {
        if (obj_function_list.gadget[| GADGET_TYPE] == GT_WEAPON)
        {
            for (var i = 0; i &lt; ds_list_size(obj_function_list.gadget[| GADGET_FUNC]); i++)
            {
                var pos = ds_list_find_value(ds_list_find_value(ds_list_find_value(obj_function_list.gadget, 
                GADGET_FUNC), i), FUNC_POS);
                pos[| POS_POINT] = noone;
            }
        }
        var pos = ds_list_find_value(ds_list_find_value(ds_list_find_value(obj_function_list.gadget, 
        GADGET_FUNC), obj_function_list.selected), FUNC_POS);
        pos[| POS_POINT] = get_active_grid();
        var cell_size = pos[| POS_POINT].cell_size;
        var grid_size = pos[| POS_POINT].grid_size;
        pos[| POS_X] = min(max(0, floor((mouse_x - pos[| POS_POINT].x) / cell_size)), grid_size - 1);
        pos[| POS_Y] = min(max(0, floor((mouse_y - pos[| POS_POINT].y) / cell_size)), grid_size - 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_exists(my_grid, ds_type_grid))
{
    var crnt_grid = get_active_grid();
    var cell_size = crnt_grid.cell_size;
    var grid_size = crnt_grid.grid_size;
    var crnt_x = min(max(0, floor((mouse_x - crnt_grid.x) / cell_size)), grid_size - 1);
    var crnt_y = min(max(0, floor((mouse_y - crnt_grid.y) / cell_size)), grid_size - 1);
    var grid_w = ds_grid_width(my_grid);
    var grid_h = ds_grid_height(my_grid);
    if (((obj_function_list.gadget[| GADGET_TYPE] == GT_WEAPON) || (obj_function_list.gadget[| GADGET_TYPE] == GT_RADAR)) &amp;&amp;!(crnt_grid.my_ship)) ||
    (((obj_function_list.gadget[| GADGET_TYPE] == GT_ARMOR) || (obj_function_list.gadget[| GADGET_TYPE] == GT_JAMMER)) &amp;&amp;(crnt_grid.my_ship))
    {
        draw_set_alpha(0.5);
        for (var i = 0; i &lt; grid_w; i++)
        {
            for (var j = 0; j &lt; grid_h; j++)
            {
                if ((crnt_x + i &lt; grid_size) &amp;&amp; (crnt_y + j &lt; grid_size) &amp;&amp; 
                (crnt_grid.ship_grid[# (crnt_x + i), (crnt_y + j)] &amp; CELL_EXISTS) &amp;&amp;
                (my_grid[# i, j] &amp; CELL_EXISTS))
                {
                    draw_sprite(my_sprite, -1, crnt_grid.x + (crnt_x + i) * cell_size,
                    crnt_grid.y + (crnt_y + j) * cell_size);
                    draw_sprite(s_crs_sel, -1, crnt_grid.x + (crnt_x + i) * cell_size,
                    crnt_grid.y + (crnt_y + j) * cell_size);
                }
            }
        }
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
